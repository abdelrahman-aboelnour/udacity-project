version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            export SUCCESS=$(curl https://kvdb.io/QPHKszVEHMUtnzPfghxuo7/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( ${SUCCESS}==1 )); 
            then
               cd ~/project/backend
               npm install
               npm run migrations:revert
               exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: dependencies
          command: |
              cd frontend
              npm i
      - run:
          name: Build front-end
          command: |
              cd frontend
              npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: dependencies
          command: |
              cd backend
              npm i
      - run:
          name: Back-end build
          command:  |
              cd backend
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend test
          command:  |
              cd frontend
              npm run test
                
  test-backend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend test
          command:  |
              cd backend
              npm run test
            
  scan-frontend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend security audit
          command:  |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit fix --force
              npm audit --audit-level=critical

  scan-backend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: backend security audit
          command:  |
              cd backend
              npm audit fix --audit-level=critical --force
              npm audit fix --force
              npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install gzip and tar
          command: |
            yum -y install gzip
            yum -y install tar
        
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"  \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              
              
      - run:
          name: Add back-end ip to ansible inventory
          command: | 
            cd .circleci/ansible
            aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[*].[PublicIpAddress]" --output text >> inventory.txt
            cat inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment 

  configure-infrastructure:
    docker:
      - image: python:3.12.0a4-alpine3.17
    steps:
        - checkout
        - add_ssh_keys:
                # You can get this ID in the section where you registered the SSH Key
                fingerprints: ["1c:d1:16:fd:c3:8d:83:4f:90:1a:c3:f5:98:a8:7c:65"] 
        - attach_workspace:
            at: ~/
        - run: 
            name: Install Ansible
            command: |
                apk add --update ansible
        - run:
            name: Print inventory content
            command: |
                cd .circleci/ansible
                cat inventory.txt
        - run:
            name: Ansible Configure server
            command: |
                cd .circleci/ansible
                cat inventory.txt
                ansible-playbook -i inventory.txt configure-server.yml
        - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
                export ENVIROMENT=production
                export TYPEORM_CONNECTION=postgres
                export TYPEORM_MIGRATIONS_DIR="./src/migrations"
                export TYPEORM_ENTITIES="./src/modules/domain/**/*.entity{.ts,.js}"
                export TYPEORM_MIGRATIONS="./src/migrations/*{.ts,.js}"
                export TYPEORM_HOST=$TYPEORM_HOST
                export TYPEORM_PORT=$TYPEORM_PORT
                export TYPEORM_USERNAME=$TYPEORM_USERNAME
                export TYPEORM_PASSWORD=$TYPEORM_PASSWORD
                export TYPEORM_DATABASE=$TYPEORM_DATABASE
                env
                cd backend
                npm i
                npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
               if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
               then
                   curl https://kvdb.io/QPHKszVEHMUtnzPfghxuo7/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
               fi 
      - destroy-environment      

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install Ansible& nodejs & npm & amazon cli
          command: |
            sudo apt-get update
            sudo apt-get install -y ansible
            sudo apt-get install -y nodejs
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - attach_workspace:
            at: ~/
      - restore_cache:
            keys: [frontend-build]
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[*].[PublicIpAddress]" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            
      - destroy-environment   
      - revert-migrations
                    
  deploy-backend:
    docker:
      - image: python:3.12.0a4-alpine3.17
    steps:
        - checkout
        - add_ssh_keys:
                # You can get this ID in the section where you registered the SSH Key
                fingerprints: ["1c:d1:16:fd:c3:8d:83:4f:90:1a:c3:f5:98:a8:7c:65"] 
        - attach_workspace:
            at: ~/
        - restore_cache:
            keys: [backend-build]
        - run: 
            name: Install Ansible & AWS & NPM
            command: |
                apk add --update ansible
                apk add --update npm
                apk add --update curl
                apk add --update py-pip
                pip install awscli
        - run:
            name: Print inventory content
            command: |
                cd .circleci/ansible
                cat inventory.txt
        - run:
            name: Deploy backend
            command: |
                
                export ENVIROMENT=production
                export TYPEORM_CONNECTION=postgres
                export TYPEORM_MIGRATIONS_DIR=./migrations
                export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
                export TYPEORM_MIGRATIONS=./migrations/*{.ts,.js}
                export TYPEORM_HOST=$TYPEORM_HOST
                export TYPEORM_PORT=$TYPEORM_PORT
                export TYPEORM_USERNAME=$TYPEORM_USERNAME
                export TYPEORM_PASSWORD=$TYPEORM_PASSWORD
                export TYPEORM_DATABASE=$TYPEORM_DATABASE
                
                
                env
                
                cd backend
                npm i
                npm run build
                
                echo ENVIROMENT=production > dist/.env
                echo TYPEORM_CONNECTION=postgres >> dist/.env
                echo TYPEORM_MIGRATIONS_DIR=./migrations >> dist/.env
                echo TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js} >> dist/.env
                echo TYPEORM_MIGRATIONS=./migrations/*{.ts,.js} >> dist/.env
                echo TYPEORM_HOST=$TYPEORM_HOST >> dist/.env
                echo TYPEORM_PORT=$TYPEORM_PORT >> dist/.env
                echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> dist/.env
                echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> dist/.env
                echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> dist/.env
                
                # Zip the directory
                tar -czf artifact.tar.gz .
                cd ..
                cp backend/artifact.tar.gz .circleci
                export TYPEORM_MIGRATIONS_DIR=./migrations
                export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
                export TYPEORM_MIGRATIONS=./migrations/*.ts
                cd .circleci/ansible
                echo "Contents  of the inventory.txt file is -------"
                cat inventory.txt
                ansible-playbook -i inventory.txt deploy-backend.yml
        
        - destroy-environment
        - revert-migrations
        
        
  smoke-test:
    docker:
      - image: python:3.12.0a4-alpine3.17
    steps:
      - checkout
      - add_ssh_keys:
            # You can get this ID in the section where you registered the SSH Key
            fingerprints: ["1c:d1:16:fd:c3:8d:83:4f:90:1a:c3:f5:98:a8:7c:65"] 
      - run: 
            name: Install Ansible & AWS-CLI & NPM & CURL
            command: |
                apk add --update ansible
                apk add --update npm
                apk add --update curl
                apk add --update py-pip
                pip install awscli
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[*].[PublicIpAddress]" --output text)
            export API_URL=http://${BACKEND_IP}:3030
            echo "API_URL = ${API_URL}"
            echo API_URL=http://${BACKEND_IP}:3030 >> frontend/.env
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[*].[PublicIpAddress]" --output text)
            export API_URL=http://${BACKEND_IP}:3030
            echo "API_URL = ${API_URL}"
            if curl -s ${API_URL}/api/status | grep "ok"
            then
                return 0
            else
                return 1
            fi
            
      - run:
          name: Frontend smoke test.
          command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees" 
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                # Change this to 0 after the job fails
                return 0
              else
                return 1
              fi
              
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install Ansible& nodejs & npm & amazon cli
          command: |
            sudo apt-get update
            sudo apt-get install -y ansible
            sudo apt-get install -y nodejs
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name "InitialStack" \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
            
            echo OldWorkFlowID: "${OldWorkflowID}"
            curl https://kvdb.io/QPHKszVEHMUtnzPfghxuo7/OldWorkflowID -d "${OldWorkflowID}" -k
            echo CurrentWorkFlowID: "${CIRCLE_WORKFLOW_ID:0:7}"
      
              
      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install Ansible& nodejs & npm & amazon cli
          command: |
            sudo apt-get update
            sudo apt-get install -y ansible
            sudo apt-get install -y nodejs
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get old stack workflow id and Remove old stacks and files
          command: |
            export OldWorkflowID=$(curl --insecure https://kvdb.io/QPHKszVEHMUtnzPfghxuo7/OldWorkflowID)
            echo OldWorkflowID: "${OldWorkflowID}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                   --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}" 
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "----------------------- starting cleanup -----------------------"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo "----------------------- cleanup failed -----------------------"
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
          
          
          
          
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test: 
          requires: [deploy-backend, deploy-frontend] 
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]